// See LICENSE for license details.

#include <assert.h>
#include "matrixmul.h"
#include "util.h"

int main() {
  int64_t input1_data[16*16] = {
    0,   3,   2,   0,   3,   1,   0,   3,   2,   3,   2,   0,   3,   3,   1,   2,
    1,   1,   2,   3,   1,   2,   3,   1,   1,   3,   2,   2,   0,   1,   3,   2,
    1,   0,   1,   3,   3,   0,   3,   3,   3,   3,   0,   3,   2,   1,   2,   2,
    1,   1,   0,   3,   3,   1,   2,   3,   3,   0,   1,   2,   1,   0,   1,   2,

    1,   0,   2,   2,   1,   1,   1,   1,   1,   1,   2,   0,   3,   1,   1,   2,
    3,   2,   0,   0,   0,   3,   3,   3,   2,   1,   2,   3,   1,   0,   0,   0,
    1,   1,   3,   3,   3,   1,   1,   2,   3,   1,   3,   3,   2,   3,   2,   1,
    2,   1,   1,   0,   0,   0,   0,   0,   1,   3,   3,   1,   1,   1,   2,   2,

    1,   1,   3,   0,   2,   2,   1,   3,   2,   1,   2,   2,   1,   3,   1,   3,
    1,   2,   1,   3,   2,   2,   0,   1,   0,   0,   1,   2,   3,   3,   1,   0,
    2,   3,   2,   3,   2,   0,   0,   0,   0,   0,   3,   1,   3,   0,   0,   0,
    1,   2,   1,   2,   3,   2,   0,   0,   2,   2,   3,   0,   3,   0,   0,   3,

    3,   1,   1,   1,   2,   2,   1,   3,   0,   3,   3,   1,   0,   0,   3,   2,
    1,   0,   2,   2,   1,   1,   1,   1,   1,   1,   2,   0,   3,   1,   1,   2,
    3,   2,   0,   0,   0,   3,   3,   3,   2,   1,   2,   3,   1,   0,   0,   0,
    1,   1,   3,   3,   3,   1,   1,   2,   3,   1,   3,   3,   2,   3,   2,   1
  };

  int64_t input2_data[16*16] = {
    1,   1,   0,   3,   1,   2,   0,   0,   0,   0,   0,   2,   1,   2,   3,   0,
    2,   1,   2,   3,   3,   0,   2,   2,   1,   1,   2,   2,   0,   2,   2,   1,
    3,   3,   2,   2,   1,   1,   1,   1,   2,   1,   2,   2,   3,   3,   3,   0,
    2,   3,   1,   2,   1,   1,   2,   2,   0,   1,   0,   3,   2,   1,   1,   1,

    2,   0,   2,   1,   3,   3,   2,   3,   2,   0,   3,   1,   3,   3,   2,   0,
    2,   2,   1,   1,   2,   2,   1,   2,   3,   3,   1,   3,   2,   2,   2,   3,
    1,   0,   0,   0,   1,   1,   2,   0,   3,   2,   3,   3,   0,   2,   3,   1,
    2,   0,   2,   1,   1,   2,   3,   1,   3,   2,   1,   0,   0,   0,   0,   0,

    1,   2,   0,   3,   2,   2,   0,   0,   3,   2,   1,   1,   3,   0,   2,   0,
    3,   3,   1,   3,   3,   0,   0,   2,   2,   0,   0,   0,   1,   0,   0,   1,
    3,   2,   2,   1,   3,   2,   0,   1,   2,   2,   3,   2,   1,   1,   1,   1,
    2,   2,   3,   1,   1,   2,   0,   2,   1,   1,   2,   3,   1,   0,   1,   0,

    2,   0,   3,   0,   3,   0,   3,   2,   2,   3,   3,   2,   1,   0,   2,   2,
    0,   3,   3,   2,   2,   3,   2,   2,   0,   3,   2,   3,   2,   0,   1,   2,
    1,   0,   1,   1,   3,   1,   0,   2,   0,   0,   2,   1,   2,   2,   0,   2,
    0,   1,   0,   2,   3,   0,   2,   1,   3,   0,   1,   3,   1,   1,   0,   0
  };


  int64_t output_data[16*16];

  uint64_t stop_cycle, start_cycle;

  printf ("Hardware Start\n");
  start_cycle = read_csr(mcycle);
  for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 16; j++) {
      matrixmul (output_data[j*16+i], &(input1_data[j*16]), &(input2_data[i]));
    }
  }
  stop_cycle = read_csr(mcycle);

  for (int j = 0; j < 16; j++) {
    for (int i = 0; i < 16; i++) {
      printf ("%03ld ", output_data[j*16+i]);
    }
    printf ("\n");
  }
  printf ("Hardware Finished. %ld-%ld=%ld\n", stop_cycle, start_cycle, stop_cycle-start_cycle);

  printf ("Software Start\n");
  start_cycle = read_csr(mcycle);
  for (int j = 0; j < 16; j++) {
    for (int i = 0; i < 16; i++) {
      output_data[j*16+i] = 0;
      for (int k = 0; k < 16; k++) {
        output_data[j*16+i] += input1_data[j*16+k] * input2_data[k*16+i];
      }
    }
  }
  stop_cycle = read_csr(mcycle);

  for (int j = 0; j < 16; j++) {
    for (int i = 0; i < 16; i++) {
      printf ("%03ld ", output_data[j*16+i]);
    }
    printf ("\n");
  }

  printf ("Software Finished. %ld-%ld=%ld\n", stop_cycle, start_cycle, stop_cycle-start_cycle);

  return 0;
}
